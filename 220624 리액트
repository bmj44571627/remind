## 리액트 입문자가 알아야 하는 기초개념들



>### React 란?

---

`React`는 사용자 인터페이스를 만들 때 자주 사용하는 자바스크립트 기능들을 모아놓고 필요할 때 가져다 쓰는 저장소 역할이다.

`React`는 `Component` 를 이용해 기능을 구축하는데, 다양한 레고 블럭에 비유할 수 있다.  상호작용이 많은 웹페이지는 기능관리에 어려움이 있는데 `React`, `Angular`, `Vue` 같은 프레임워크들은 상태관리를 최소화 해주고 DOM 조작을 최소화하여 웹페이지의 개발, 유지보수를 수월하게 만들어준다.

<br>

>### Component

---

`React`의 가장 큰 특징은 `Component-based` 라는 것이다. 컴포넌트는 "하나의 독립적인 의미를 가진 단위의 모듈"이며 컴포넌트의 이름은 항상 대문자로 시작해야 한다.

#### * 클래스 component

추가적으로 element는 React 앱의 가장 작은 단위로, 우리가 알고있는 일반 객체이다. React element는 불변객체이기 때문에 자식이나 속성을 변경할 수 없다.


<br>

>### Props

---

`Props`는 상위 컴포넌트가 하위 컴포넌트에게 내리는 데이터이며 객체다.
`Props` 컴포넌트는 읽기 전용이다. 하위 컴포넌트는 `props` 를 변경할 수 없고 사용만 가능하다.

<br>

>### State

`State`는 컴포넌트가 독립적으로 갖는 상태를 말한다. 객체이며 컴포넌트 안에서만 제어되어 보관, 관리된다. 

`State`는 직접 변경할 수 없고 내장 메소드인 `setState()`를 사용해야 한다.


<br>

>### Life Cycle 생명주기

---

`Life Cycle`은 컴포넌트가 생성, 업데이트 ,삭제 될 때 일어나는 일련의 과정들이고 각 단계의 전, 후로 미리 지정되어 있는 특정 생명주기 메소드들이 실행된다.

![](https://i.imgur.com/cNfpEph.png)


`Life Cycle`은 각 단계마다 실행되는 메소드들을 이용하여 원하는 타이밍에 원하는 기능이 실행되도록 구현할 수 있다. 또한 사용자들이 작성해주지 않아도 생명주기 메소드들은 자동으로 실행된다. 미지정시 빈 함수가 실행된다.

<br>

>### Lifting State Up

React는 단방향 데이터 플로우를 가지고 있다. 즉, 부모만 자식에게 데이터를 줄 수 있고 자식은 부모에게 데이터를 줄 수 없다는 뜻이다.

하지만, 자식이 부모의 상태를 변경해야 한다면 `Lifting state up`을 이용한다.

중요한 것은, 상위 컴포넌트에서 this를 꼭 bind해서 넘겨야 한다는 것이다. 그래야 부모의 상태를 변경한다. arrow function을 사용하면 실행 context를 만들지 않으므로 binding이 필요 없다는 점도 기억하면 좋다.

<br>

>## ★ 오늘의 총평

리액트 부분이 어려워 공식 홈페이지와 기타 강의를 통하여 보충하도록 한다
