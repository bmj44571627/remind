## 자바스크립트 함수 다루기

>### 함수란?

---

<br>

JS에서 `함수(function)`는 어떤 목적을 가지고 작성한 코드를 모은 블록문이다. 블록문을 function 키워드, 식별자, 소괄호와 함께 묶으면 함수가 생성되는데 이를 함수를 정의한다고 한다.

<br>


>### 함수를 정의하는 방법

---

<br>

* #### 함수 선언문으로 함수 정의하기

함수선언문은 `function` 키워드로 함수를 정의하는 방법이다.

```css
function 식별자(){}
```

이렇게 함수를 정의하고 나면 식별자(함수명)과 ()로 함수를 실행할 수 있다.

<br>

* #### 함수 표현식으로 함수 정의하기

함수 표현식은 변수에 할당하는 함수에 식별자가 있으면 네이밍 함수, 없으면 익명 함수로 다시 구분한다. 
키워드 다음에 오는 식별자로 함수를 호출하지 않고 할당한 변수명으로 호출한다.

<br>

* #### 화살표 함수로 함수 정의하기

화살표를 사용해 함수를 정의하는 방법이다. 익명 함수로만 정의할 수 있다.

`() => {};`

<br>


>### 함수 기능 확장하기

---

* #### 매개변수와 인수

`매개변수(parameter)`는 함수를 정의할 때 외부에서 전달하는 데이터를 함수에서 받을 수 있도록 정의하는 변수이다. 정의한 함수를 호출할 때 ()에 전달하고 싶은 데이터를 적는데, 이를 인수라 한다. 인수는 함수의 매개변수에 자동으로 할당된다.

* #### 매개변수의 특징

1. 명명 규칙은 일반적으로 변수와 같다.

2. 데이터 전달과정은 함수 호출 시 전달되는 데이터와 일대일로 대응되어 데이터가 할당된다.

```css
function sum(num1, num2){}
sum(10, 20);
```

인수에서 데이터를 전달하지만 매개변수가 없는 경우에는 값을 전달해도 사용할 수 없다.

```css
function sum(){}
sum(10, 20);
```


3. 기본값 할당

매개변수에 직접 데이터를 할당하는 방식으로 단순하게 기본값을 지정할 수 있다.

```css
function sum(a = 10, b = 10){
console.log(a, b);
}
sum();
```

<br>

* #### return 문

함수 외부로 데이터를 반환할 때는 return문을 사용해야 한다. 

```css
return 식(또는 값)
```

내부 변수인 result에 할당된 데이터를 내부 함수를 호출한 곳으로 전달되는 것을 반환한다고 하며 이 데이터를 반환값이라고 한다. 또한 return 문은 데이터를 반환하지 않으면 단순히 함수 실행을 종료하는 역할만 하게 되고 undefined를 반환한다.

<br>

>### 함수의 특징 이해하기

---

* #### 스코프


스코프는 변수나 함수와 같은 참조 대상 식별자를 찾아내기 위한 규칙이다. 함수 스코프, 블록 스코프 방식이냐에 따라 전역, 지역 스코프로 참조 범위가 달라진다.


* #### 함수 스코프

함수 스코프는 함수에서 정의한 블록문만 스코프의 유효 범위로 인정하는 방식이다.

* #### 블록 스코프

블록 스코프는 {}로 구성된 블록문 기준으로 유효 범위를 나누는 방식이다. let과 const 키워드로 선언한 변수에 한해서만 적용된다.

* #### 참조 우선순위

전역 스코프와 지역 스코프에 같은 식별자를 가지는 참조 대상이 있다면 같은 지역 스코프의 식별자를 참조한다.

<br>

>### 함수 호이스팅

---

호이스팅은 코드를 선언과 할당으로 분리해 선언부를 자신의 스코프 최상위로 끌어올리는 것이다.

<br>

>### 즉시 실행 함수 사용하기

---

즉시 실행 함수란 함수를 정의하면서 동시에 실행까지 하는 함수이다.

```css
(function(){})();
```

일반적으로 함수를 선언하면 전역 스코프에 정의된다. 그리고 프로그램 종료 전까지 메모리에서 사라지지 않는다.

const 키워드에 할당된 식별자는 더 이상 사용할 수 없는데 이를 전역 스코프가 오염됐다고 표현한다. 이런 경우 즉시 실행 함수를 정의하면 방지할 수 있다.
