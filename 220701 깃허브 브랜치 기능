>### 브랜치란?

---

모든 버젼 관리 시스템에는 브랜치가 있다.

### * 브랜치가 필요한 이유

각자 다른 버젼의 업데이트 사항의 복잡성을 줄여 주기 위하여 branch라는 도구가 만들어졌다.

### * 브랜치 기능 살펴보기

깃으로 버젼 관리를 시작하면 master라는 브랜치가 만들어지는데 사용자가 커밋할 때마다 master 브랜치는 최신 커밋을 가리킨다. 즉 브랜치는 커밋을 가리키는 포인터와 비슷하다.

새 브랜치를 만들면 기존에 저장한 파일을 master 브랜치에 그대로 유지하면서 기존 파일 내용을 수정하거나 새로운 기능을 구현할 파일을 만들 수 있다. 이것을 `분기(branch)`라고 한다.

원하는 작업을 다 끝냈다면 새 브랜치에 있던 파일을 원래 master 브랜치에 `병합(merge)`할 수 있다.

<br>

>### 브랜치 만들기

---

`git branch <branch-name>` 으로 현재까지의 commit을 기본으로 branch를 생성한다.

기존 branch에서 특정 commit한 순간까지의 프로젝트를 가져와서 새로운 branch를 생성한다면 commit id를 넣어준다.

`git branch <branch-name> <commit-id>`


<br>

>### 브랜치 바꾸기

---

현재 branch가 main일때 다른 branch인 test로 변환하고 싶다면 checkout과 switch 명령어를 사용한다. checkout과 switch의 차이점은 checkout의 경우 git switch와 git restore 두 가지 역할을 모두 수행하는 반면 git switch는 브랜치만 바꿀 때 사용한다.

`git switch <branch-name>`

<br>

>### 브랜치 이름 변경

---

현재 HEAD branch의 이름을 변경할 땐 아래와 같다

`git branch -m <new-branch-name>`

<br>

>### Remote branch에 local branch upload

---

개발을 할 때 Github에 있는 branch에 로컬 branch를 업로드 해야하는데

`git push -u <remote-branch>`

사용해준다.

<br>

>### git branch


처음에 기본 브랜치는 자동으로 master로 생성, 설정된다. 이 브랜치 하나로만 작업을 하면 이전 버전으로 돌아가거나 다시 최신 버전으로 돌아가는 일이 번거로울 것이다. 여러 개의 버전을 편리하게 컨트롤하기 위해서, 혹은 실패 가능성이 있는 테스트를 하기 위해서 branch를 사용한다.

기초적인 branch 명령어만 정리했다.


git help branch : git branch 관련된 도움말이 표시된다.

git branch : git branch만 입력하면 현재 repository의 branch를 보여준다. 현재 branch 앞에는 별(*)표시가 되어 있다.

git branch [<branchname>] : git branch 뒤에 이름을 붙이면, 해당 이름의 branch가 생성된다.
  
git branch -m [<oldbranch>] <newbranch> : branch를 이동하거나 이름을 변경한다.
  
git branch -d [<branchname>] : 해당 branch를 삭제한다.
사실, 맨 처음 branch를 사용할 때 git branch help 라고 쳤다가 ‘help’라는 이름의 branch가 생성되고, 또 지우느라 애를 먹었다.


git checkout
branch 간의 이동은 git checkout 명령어를 통해서 할 수 있다.

git checkout <branch> : 해당 branch로 이동한다.
git checkout -b <new_branch> : 새로운 브랜치를 생성하고, 바로 그 브랜치로 이동한다.

git merge
test branch에서 commit 한 코드는 matser branch로 돌아와서 합칠 수 있다.

git merge <branch> : 합칠 브랜치에서 ‘git merge <합쳐질 브랜치="">' 형식으로 사용한다.
git merge 실패
두 브랜치에서 같은 파일을 동시에 수정하고 merge하려고 할 경우, merge에 실패할 수 있다. 실패하게 되면 Git은 충돌(Conflict) 메세지를 출력한다.

이때 어떤 파일에서 오류가 났는지 git status 명령어로 확인해볼 수 있다. 해당 파일을 수정한 후에 다시 merge를 진행한다.

>## ★금일 특이사항
  
  ---
  
  조원들 모두가 깃허브, 리액트 사용에 대한 감을 잡지 못하여 리액트를 학습한 후 활용하여 과제를 시도해 보기로 합의하였습니다
